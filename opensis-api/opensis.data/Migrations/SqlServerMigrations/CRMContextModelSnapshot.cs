// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using opensis.data.Models;

namespace opensis.data.Migrations.SqlServerMigrations
{
    [DbContext(typeof(CRMContext))]
    partial class CRMContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("opensis.data.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("StateId")
                        .HasColumnName("stateid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("City");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Eshkashem",
                            StateId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bala Murghab",
                            StateId = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Tirana",
                            StateId = 3
                        },
                        new
                        {
                            Id = 4,
                            Name = "kraste",
                            StateId = 4
                        },
                        new
                        {
                            Id = 5,
                            Name = "Albani",
                            StateId = 5
                        },
                        new
                        {
                            Id = 6,
                            Name = "Aïn Bénian",
                            StateId = 6
                        },
                        new
                        {
                            Id = 7,
                            Name = "Lucknow",
                            StateId = 7
                        },
                        new
                        {
                            Id = 8,
                            Name = "Kolkata",
                            StateId = 8
                        });
                });

            modelBuilder.Entity("opensis.data.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryCode")
                        .HasColumnName("countrycode")
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryCode = "001",
                            Name = "Afghanistan"
                        },
                        new
                        {
                            Id = 2,
                            CountryCode = "002",
                            Name = "India"
                        },
                        new
                        {
                            Id = 3,
                            CountryCode = "003",
                            Name = "India"
                        },
                        new
                        {
                            Id = 4,
                            CountryCode = "004",
                            Name = "India"
                        });
                });

            modelBuilder.Entity("opensis.data.Models.Gradelevels", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("GradeId")
                        .HasColumnName("grade_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnName("last_updated")
                        .HasColumnType("datetime");

                    b.Property<int?>("NextGradeId")
                        .HasColumnName("next_grade_id")
                        .HasColumnType("int");

                    b.Property<string>("ShortName")
                        .HasColumnName("short_name")
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<int?>("SortOrder")
                        .HasColumnName("sort_order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("TenantId", "SchoolId", "GradeId")
                        .HasName("PK_Table_Gradelevels");

                    b.ToTable("Gradelevels");
                });

            modelBuilder.Entity("opensis.data.Models.Language", b =>
                {
                    b.Property<int>("LangId")
                        .HasColumnName("lang_id")
                        .HasColumnType("int");

                    b.Property<string>("LanguageCode")
                        .HasColumnName("language_code")
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<string>("Lcid")
                        .HasColumnName("lcid")
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<string>("Locale")
                        .HasColumnName("locale")
                        .HasColumnType("nchar(50)")
                        .IsFixedLength(true)
                        .HasMaxLength(50);

                    b.HasKey("LangId")
                        .HasName("PK_Table_Language");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("opensis.data.Models.Membership", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("MembershipId")
                        .HasColumnName("membership_id")
                        .HasColumnType("int")
                        .HasComment("can be considered as profileid of Opensis1");

                    b.Property<string>("Access")
                        .HasColumnName("access")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnName("last_updated")
                        .HasColumnType("datetime");

                    b.Property<string>("Profile")
                        .IsRequired()
                        .HasColumnName("profile")
                        .HasColumnType("varchar(30)")
                        .HasComment("E.g. admin,student,teacher")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(100)")
                        .HasComment("e.g. Administrator,Student,Teacher,Dept. head")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool?>("WeeklyUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weekly_update")
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("TenantId", "SchoolId", "MembershipId")
                        .HasName("PK_Table_membership_1");

                    b.ToTable("membership");
                });

            modelBuilder.Entity("opensis.data.Models.Notice", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("NoticeId")
                        .HasColumnName("notice_id")
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnName("body")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnName("created_time")
                        .HasColumnType("datetime");

                    b.Property<bool>("Isactive")
                        .HasColumnName("isactive")
                        .HasColumnType("bit");

                    b.Property<string>("TargetMembershipIds")
                        .IsRequired()
                        .HasColumnName("target_membership_ids")
                        .HasColumnType("varchar(50)")
                        .HasComment("Signifies group of user for whom notice is visible. to be saved as comma separated values. if user's membership_id falls in any of the value, he can see the notice.")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnName("valid_from")
                        .HasColumnType("date");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnName("valid_to")
                        .HasColumnType("date");

                    b.HasKey("TenantId", "SchoolId", "NoticeId")
                        .HasName("PK_Table_Notice");

                    b.ToTable("Notice");
                });

            modelBuilder.Entity("opensis.data.Models.Plans", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("PlanId")
                        .HasColumnName("plan_id")
                        .HasColumnType("int");

                    b.Property<byte[]>("Features")
                        .HasColumnName("features")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("MaxApiChecks")
                        .HasColumnName("max_api_checks")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("TenantId", "SchoolId", "PlanId")
                        .HasName("PK_Table_Plans");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("opensis.data.Models.ProgressPeriods", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("MarkingPeriodId")
                        .HasColumnName("marking_period_id")
                        .HasColumnType("int");

                    b.Property<decimal>("AcademicYear")
                        .HasColumnName("academic_year")
                        .HasColumnType("decimal(4, 0)");

                    b.Property<int>("QuarterId")
                        .HasColumnName("quarter_id")
                        .HasColumnType("int");

                    b.Property<bool?>("DoesComments")
                        .HasColumnName("does_comments")
                        .HasColumnType("bit");

                    b.Property<bool?>("DoesExam")
                        .HasColumnName("does_exam")
                        .HasColumnType("bit");

                    b.Property<bool?>("DoesGrades")
                        .HasColumnName("does_grades")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnName("last_updated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PostEndDate")
                        .HasColumnName("post_end_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("PostStartDate")
                        .HasColumnName("post_start_date")
                        .HasColumnType("date");

                    b.Property<int?>("RolloverId")
                        .HasColumnName("rollover_id")
                        .HasColumnType("int");

                    b.Property<string>("ShortName")
                        .HasColumnName("short_name")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int?>("SortOrder")
                        .HasColumnName("sort_order")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("TenantId", "SchoolId", "MarkingPeriodId", "AcademicYear", "QuarterId")
                        .HasName("PK_Table_Progress_periods");

                    b.HasIndex("TenantId", "SchoolId", "QuarterId");

                    b.ToTable("progress_periods");
                });

            modelBuilder.Entity("opensis.data.Models.Quarters", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("MarkingPeriodId")
                        .HasColumnName("marking_period_id")
                        .HasColumnType("int");

                    b.Property<decimal?>("AcademicYear")
                        .HasColumnName("academic_year")
                        .HasColumnType("decimal(4, 0)");

                    b.Property<bool?>("DoesComments")
                        .HasColumnName("does_comments")
                        .HasColumnType("bit");

                    b.Property<bool?>("DoesExam")
                        .HasColumnName("does_exam")
                        .HasColumnType("bit");

                    b.Property<bool?>("DoesGrades")
                        .HasColumnName("does_grades")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnName("last_updated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PostEndDate")
                        .HasColumnName("post_end_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("PostStartDate")
                        .HasColumnName("post_start_date")
                        .HasColumnType("date");

                    b.Property<int?>("RolloverId")
                        .HasColumnName("rollover_id")
                        .HasColumnType("int");

                    b.Property<int?>("SemesterId")
                        .HasColumnName("semester_id")
                        .HasColumnType("int");

                    b.Property<string>("ShortName")
                        .HasColumnName("short_name")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<decimal?>("SortOrder")
                        .HasColumnName("sort_order")
                        .HasColumnType("decimal(10, 0)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("TenantId", "SchoolId", "MarkingPeriodId")
                        .HasName("PK_Table_Quarters");

                    b.HasIndex("TenantId", "SchoolId", "SemesterId");

                    b.ToTable("Quarters");
                });

            modelBuilder.Entity("opensis.data.Models.Rooms", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnName("room_id")
                        .HasColumnType("int");

                    b.Property<int?>("Capacity")
                        .HasColumnName("capacity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnName("last_updated")
                        .HasColumnType("datetime");

                    b.Property<int?>("SortOrder")
                        .HasColumnName("sort_order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("TenantId", "SchoolId", "RoomId")
                        .HasName("PK_Table_Rooms");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("opensis.data.Models.SchoolCalendars", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("CalenderId")
                        .HasColumnName("calender_id")
                        .HasColumnType("int");

                    b.Property<decimal?>("AcademicYear")
                        .HasColumnName("academic_year")
                        .HasColumnType("decimal(4, 0)");

                    b.Property<string>("Days")
                        .HasColumnName("days")
                        .HasColumnType("varchar(7)")
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.Property<bool?>("DefaultCalender")
                        .HasColumnName("default_calender")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnName("last_updated")
                        .HasColumnType("datetime");

                    b.Property<int?>("RolloverId")
                        .HasColumnName("rollover_id")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("TenantId", "SchoolId", "CalenderId")
                        .HasName("PK_Table_School_Calendars");

                    b.ToTable("school_calendars");
                });

            modelBuilder.Entity("opensis.data.Models.SchoolDetail", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<string>("Affiliation")
                        .HasColumnName("affiliation")
                        .HasColumnType("nchar(100)")
                        .IsFixedLength(true)
                        .HasMaxLength(100);

                    b.Property<string>("Associations")
                        .HasColumnName("associations")
                        .HasColumnType("nchar(100)")
                        .IsFixedLength(true)
                        .HasMaxLength(100);

                    b.Property<string>("CommonToiletAccessibility")
                        .HasColumnName("common_toilet_accessibility")
                        .HasColumnType("nchar(50)")
                        .IsFixedLength(true)
                        .HasMaxLength(50);

                    b.Property<string>("ComonToiletType")
                        .HasColumnName("comon_toilet_type")
                        .HasColumnType("nchar(50)")
                        .IsFixedLength(true)
                        .HasMaxLength(50);

                    b.Property<bool?>("CurrentlyAvailable")
                        .HasColumnName("currently_available")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateSchoolClosed")
                        .HasColumnName("date_school_closed")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateSchoolOpened")
                        .HasColumnName("date_school_opened")
                        .HasColumnType("date");

                    b.Property<bool?>("Electricity")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("nchar(100)")
                        .IsFixedLength(true)
                        .HasMaxLength(100);

                    b.Property<string>("Facebook")
                        .HasColumnName("facebook")
                        .HasColumnType("nchar(100)")
                        .IsFixedLength(true)
                        .HasMaxLength(100);

                    b.Property<string>("Fax")
                        .HasColumnName("fax")
                        .HasColumnType("nchar(20)")
                        .IsFixedLength(true)
                        .HasMaxLength(20);

                    b.Property<string>("FemaleToiletAccessibility")
                        .HasColumnName("female_toilet_accessibility")
                        .HasColumnType("nchar(50)")
                        .IsFixedLength(true)
                        .HasMaxLength(50);

                    b.Property<string>("FemaleToiletType")
                        .HasColumnName("female_toilet_type")
                        .HasColumnType("nchar(50)")
                        .IsFixedLength(true)
                        .HasMaxLength(50);

                    b.Property<string>("Gender")
                        .HasColumnName("gender")
                        .HasColumnType("nchar(6)")
                        .IsFixedLength(true)
                        .HasMaxLength(6);

                    b.Property<bool?>("HandwashingAvailable")
                        .HasColumnName("handwashing_available")
                        .HasColumnType("bit");

                    b.Property<string>("HighestGradeLevel")
                        .HasColumnName("highest_grade_level")
                        .HasColumnType("nchar(100)")
                        .IsFixedLength(true)
                        .HasMaxLength(100);

                    b.Property<string>("HygeneEducation")
                        .HasColumnName("hygene_education")
                        .HasColumnType("nchar(50)")
                        .IsFixedLength(true)
                        .HasMaxLength(50);

                    b.Property<string>("Instagram")
                        .HasColumnName("instagram")
                        .HasColumnType("nchar(100)")
                        .IsFixedLength(true)
                        .HasMaxLength(100);

                    b.Property<bool?>("Internet")
                        .HasColumnType("bit");

                    b.Property<string>("LinkedIn")
                        .HasColumnName("linkedin")
                        .HasColumnType("nchar(100)")
                        .IsFixedLength(true)
                        .HasMaxLength(100);

                    b.Property<string>("Locale")
                        .HasColumnName("locale")
                        .HasColumnType("nchar(100)")
                        .IsFixedLength(true)
                        .HasMaxLength(100);

                    b.Property<string>("LowestGradeLevel")
                        .HasColumnName("lowestgradelevel")
                        .HasColumnType("nchar(100)")
                        .IsFixedLength(true)
                        .HasMaxLength(100);

                    b.Property<string>("MainSourceOfDrinkingWater")
                        .HasColumnName("main_source_of_drinking_water")
                        .HasColumnType("nchar(100)")
                        .IsFixedLength(true)
                        .HasMaxLength(100);

                    b.Property<string>("MaleToiletAccessibility")
                        .HasColumnName("male_toilet_accessibility")
                        .HasColumnType("nchar(50)")
                        .IsFixedLength(true)
                        .HasMaxLength(50);

                    b.Property<string>("MaleToiletType")
                        .HasColumnName("male_toilet_type")
                        .HasColumnType("nchar(50)")
                        .IsFixedLength(true)
                        .HasMaxLength(50);

                    b.Property<string>("NameOfAssistantPrincipal")
                        .HasColumnName("name_of_assistant_principal")
                        .HasColumnType("nchar(100)")
                        .IsFixedLength(true)
                        .HasMaxLength(100);

                    b.Property<string>("NameOfPrincipal")
                        .HasColumnName("name_of_principal")
                        .HasColumnType("nchar(100)")
                        .IsFixedLength(true)
                        .HasMaxLength(100);

                    b.Property<bool?>("RunningWater")
                        .HasColumnName("running_water")
                        .HasColumnType("bit");

                    b.Property<int?>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<byte[]>("SchoolLogo")
                        .HasColumnName("school_logo")
                        .HasColumnType("varbinary(50)")
                        .HasMaxLength(50);

                    b.Property<bool?>("SoapAndWaterAvailable")
                        .HasColumnName("soap_and_water_available")
                        .HasColumnType("bit");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Telephone")
                        .HasColumnName("telephone")
                        .HasColumnType("nchar(20)")
                        .IsFixedLength(true)
                        .HasMaxLength(20);

                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short?>("TotalCommonToilets")
                        .HasColumnName("total_common_toilets")
                        .HasColumnType("smallint");

                    b.Property<short?>("TotalCommonToiletsUsable")
                        .HasColumnName("total_common_toilets_usable")
                        .HasColumnType("smallint");

                    b.Property<short?>("TotalFemaleToilets")
                        .HasColumnName("total_female_toilets")
                        .HasColumnType("smallint");

                    b.Property<short?>("TotalFemaleToiletsUsable")
                        .HasColumnName("total_female_toilets_usable")
                        .HasColumnType("smallint");

                    b.Property<short?>("TotalMaleToilets")
                        .HasColumnName("total_male_toilets")
                        .HasColumnType("smallint");

                    b.Property<short?>("TotalMaleToiletsUsable")
                        .HasColumnName("total_male_toilets_usable")
                        .HasColumnType("smallint");

                    b.Property<string>("Twitter")
                        .HasColumnName("twitter")
                        .HasColumnType("nchar(100)")
                        .IsFixedLength(true)
                        .HasMaxLength(100);

                    b.Property<string>("Website")
                        .HasColumnName("website")
                        .HasColumnType("nchar(150)")
                        .IsFixedLength(true)
                        .HasMaxLength(150);

                    b.Property<string>("Youtube")
                        .HasColumnName("youtube")
                        .HasColumnType("nchar(100)")
                        .IsFixedLength(true)
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "SchoolId");

                    b.ToTable("school_detail");
                });

            modelBuilder.Entity("opensis.data.Models.SchoolMaster", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<string>("AlternateName")
                        .HasColumnName("alternate_name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasColumnType("char(50)")
                        .IsFixedLength(true)
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Country")
                        .HasColumnName("country")
                        .HasColumnType("char(50)")
                        .IsFixedLength(true)
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("County")
                        .HasColumnName("county")
                        .HasColumnType("char(50)")
                        .IsFixedLength(true)
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("char(50)")
                        .IsFixedLength(true)
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CurrentPeriodEnds")
                        .HasColumnName("current_period_ends")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnName("date_created")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModifed")
                        .HasColumnName("date_modifed")
                        .HasColumnType("datetime");

                    b.Property<string>("District")
                        .HasColumnName("district")
                        .HasColumnType("char(50)")
                        .IsFixedLength(true)
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Division")
                        .HasColumnName("division")
                        .HasColumnType("char(50)")
                        .IsFixedLength(true)
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Features")
                        .HasColumnName("features")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<int?>("MaxApiChecks")
                        .HasColumnName("max_api_checks")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("char(50)")
                        .IsFixedLength(true)
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("PlanId")
                        .HasColumnName("plan_id")
                        .HasColumnType("int");

                    b.Property<string>("SchoolAltId")
                        .HasColumnName("school_alt_id")
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<string>("SchoolClassification")
                        .HasColumnName("school_classification")
                        .HasColumnType("nchar(50)")
                        .IsFixedLength(true)
                        .HasMaxLength(50);

                    b.Property<string>("SchoolDistrictId")
                        .HasColumnName("school_district_id")
                        .HasColumnType("nchar(50)")
                        .IsFixedLength(true)
                        .HasMaxLength(50);

                    b.Property<string>("SchoolInternalId")
                        .HasColumnName("school_internal_id")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SchoolLevel")
                        .HasColumnName("school_level")
                        .HasColumnType("nchar(50)")
                        .IsFixedLength(true)
                        .HasMaxLength(50);

                    b.Property<string>("SchoolName")
                        .HasColumnName("school_name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SchoolStateId")
                        .HasColumnName("school_state_id")
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<string>("State")
                        .HasColumnName("state")
                        .HasColumnType("char(50)")
                        .IsFixedLength(true)
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("StreetAddress1")
                        .HasColumnName("street_address_1")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("StreetAddress2")
                        .HasColumnName("street_address_2")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Zip")
                        .HasColumnName("zip")
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.HasKey("TenantId", "SchoolId")
                        .HasName("PK_Table_School_Master");

                    b.HasIndex("TenantId", "SchoolId", "PlanId");

                    b.ToTable("school_master");
                });

            modelBuilder.Entity("opensis.data.Models.SchoolPeriods", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("PeriodId")
                        .HasColumnName("period_id")
                        .HasColumnType("int");

                    b.Property<decimal?>("AcademicYear")
                        .HasColumnName("academic_year")
                        .HasColumnType("decimal(4, 0)");

                    b.Property<bool?>("Attendance")
                        .HasColumnName("attendance")
                        .HasColumnType("bit");

                    b.Property<string>("Block")
                        .HasColumnName("block")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnName("end_time")
                        .HasColumnType("time");

                    b.Property<string>("IgnoreScheduling")
                        .HasColumnName("ignore_scheduling")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnName("last_updated")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Length")
                        .HasColumnName("length")
                        .HasColumnType("decimal(10, 0)");

                    b.Property<decimal?>("RolloverId")
                        .HasColumnName("rollover_id")
                        .HasColumnType("decimal(10, 0)");

                    b.Property<string>("ShortName")
                        .HasColumnName("short_name")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<decimal?>("SortOrder")
                        .HasColumnName("sort_order")
                        .HasColumnType("decimal(10, 0)");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnName("start_time")
                        .HasColumnType("time");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("TenantId", "SchoolId", "PeriodId")
                        .HasName("PK_Table_School_Periods");

                    b.ToTable("school_periods");
                });

            modelBuilder.Entity("opensis.data.Models.SchoolYears", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("MarkingPeriodId")
                        .HasColumnName("marking_period_id")
                        .HasColumnType("int");

                    b.Property<decimal?>("AcademicYear")
                        .HasColumnName("academic_year")
                        .HasColumnType("decimal(4, 0)");

                    b.Property<bool?>("DoesComments")
                        .HasColumnName("does_comments")
                        .HasColumnType("bit");

                    b.Property<bool?>("DoesExam")
                        .HasColumnName("does_exam")
                        .HasColumnType("bit");

                    b.Property<bool?>("DoesGrades")
                        .HasColumnName("does_grades")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnName("last_updated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PostEndDate")
                        .HasColumnName("post_end_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("PostStartDate")
                        .HasColumnName("post_start_date")
                        .HasColumnType("date");

                    b.Property<int?>("RolloverId")
                        .HasColumnName("rollover_id")
                        .HasColumnType("int");

                    b.Property<string>("ShortName")
                        .HasColumnName("short_name")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<decimal?>("SortOrder")
                        .HasColumnName("sort_order")
                        .HasColumnType("decimal(10, 0)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("TenantId", "SchoolId", "MarkingPeriodId")
                        .HasName("PK_Table_School_Years");

                    b.ToTable("school_years");
                });

            modelBuilder.Entity("opensis.data.Models.Sections", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("SectionId")
                        .HasColumnName("section_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnName("last_updated")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("SortOrder")
                        .HasColumnName("sort_order")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("TenantId", "SchoolId", "SectionId")
                        .HasName("PK_Table_Sections");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("opensis.data.Models.Semesters", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("MarkingPeriodId")
                        .HasColumnName("marking_period_id")
                        .HasColumnType("int");

                    b.Property<decimal?>("AcademicYear")
                        .HasColumnName("academic_year")
                        .HasColumnType("decimal(4, 0)");

                    b.Property<bool?>("DoesComments")
                        .HasColumnName("does_comments")
                        .HasColumnType("bit");

                    b.Property<bool?>("DoesExam")
                        .HasColumnName("does_exam")
                        .HasColumnType("bit");

                    b.Property<bool?>("DoesGrades")
                        .HasColumnName("does_grades")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnName("last_updated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PostEndDate")
                        .HasColumnName("post_end_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("PostStartDate")
                        .HasColumnName("post_start_date")
                        .HasColumnType("date");

                    b.Property<int?>("RolloverId")
                        .HasColumnName("rollover_id")
                        .HasColumnType("int");

                    b.Property<string>("ShortName")
                        .HasColumnName("short_name")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<decimal?>("SortOrder")
                        .HasColumnName("sort_order")
                        .HasColumnType("decimal(10, 0)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("YearId")
                        .HasColumnName("year_id")
                        .HasColumnType("int");

                    b.HasKey("TenantId", "SchoolId", "MarkingPeriodId")
                        .HasName("PK_Table_Semesters");

                    b.HasIndex("TenantId", "SchoolId", "YearId");

                    b.ToTable("Semesters");
                });

            modelBuilder.Entity("opensis.data.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CountryId")
                        .HasColumnName("countryid")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("State");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Name = "Badakhshan"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            Name = "Badghis"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 2,
                            Name = "Berat"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 2,
                            Name = "Bulqize"
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 3,
                            Name = "Adrar"
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 3,
                            Name = "Ain Defla"
                        },
                        new
                        {
                            Id = 7,
                            CountryId = 4,
                            Name = "Uttar Pradesh"
                        },
                        new
                        {
                            Id = 8,
                            CountryId = 4,
                            Name = "West Bengal"
                        });
                });

            modelBuilder.Entity("opensis.data.Models.UserMaster", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("int");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnName("emailaddress")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<int>("LangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("lang_id")
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnName("last_updated")
                        .HasColumnType("datetime");

                    b.Property<int?>("MembershipId")
                        .HasColumnName("membership_id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnName("passwordhash")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("TenantId", "SchoolId", "UserId")
                        .HasName("PK_Table_User_Master_1");

                    b.HasIndex("LangId");

                    b.HasIndex("TenantId", "SchoolId", "MembershipId");

                    b.ToTable("user_master");
                });

            modelBuilder.Entity("opensis.data.Models.Membership", b =>
                {
                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("Membership")
                        .HasForeignKey("TenantId", "SchoolId")
                        .HasConstraintName("FK_Table_membership_Table_School_Master")
                        .IsRequired();
                });

            modelBuilder.Entity("opensis.data.Models.ProgressPeriods", b =>
                {
                    b.HasOne("opensis.data.Models.Quarters", "Quarters")
                        .WithMany("ProgressPeriods")
                        .HasForeignKey("TenantId", "SchoolId", "QuarterId")
                        .HasConstraintName("FK_Table_Progress_periods_Table_Quarters")
                        .IsRequired();
                });

            modelBuilder.Entity("opensis.data.Models.Quarters", b =>
                {
                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("Quarters")
                        .HasForeignKey("TenantId", "SchoolId")
                        .HasConstraintName("FK_Table_Quarters_Table_School_Master")
                        .IsRequired();

                    b.HasOne("opensis.data.Models.Semesters", "Semesters")
                        .WithMany("Quarters")
                        .HasForeignKey("TenantId", "SchoolId", "SemesterId")
                        .HasConstraintName("FK_Table_Quarters_Table_Semesters");
                });

            modelBuilder.Entity("opensis.data.Models.SchoolCalendars", b =>
                {
                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("SchoolCalendars")
                        .HasForeignKey("TenantId", "SchoolId")
                        .HasConstraintName("FK_Table_School_Calendars_Table_School_Master")
                        .IsRequired();
                });

            modelBuilder.Entity("opensis.data.Models.SchoolDetail", b =>
                {
                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("SchoolDetail")
                        .HasForeignKey("TenantId", "SchoolId")
                        .HasConstraintName("FK_Table_School_Detail_Table_School_Master");
                });

            modelBuilder.Entity("opensis.data.Models.SchoolMaster", b =>
                {
                    b.HasOne("opensis.data.Models.Plans", "Plans")
                        .WithMany("SchoolMaster")
                        .HasForeignKey("TenantId", "SchoolId", "PlanId")
                        .HasConstraintName("FK_Table_School_Master_Table_Plans");
                });

            modelBuilder.Entity("opensis.data.Models.SchoolPeriods", b =>
                {
                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("SchoolPeriods")
                        .HasForeignKey("TenantId", "SchoolId")
                        .HasConstraintName("FK_Table_School_Periods_Table_School_Master")
                        .IsRequired();
                });

            modelBuilder.Entity("opensis.data.Models.SchoolYears", b =>
                {
                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("SchoolYears")
                        .HasForeignKey("TenantId", "SchoolId")
                        .HasConstraintName("FK_Table_School_Years_Table_School_Master")
                        .IsRequired();
                });

            modelBuilder.Entity("opensis.data.Models.Semesters", b =>
                {
                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("Semesters")
                        .HasForeignKey("TenantId", "SchoolId")
                        .HasConstraintName("FK_Table_Semesters_Table_School_Master")
                        .IsRequired();

                    b.HasOne("opensis.data.Models.SchoolYears", "SchoolYears")
                        .WithMany("Semesters")
                        .HasForeignKey("TenantId", "SchoolId", "YearId")
                        .HasConstraintName("FK_Table_Semesters_Table_School_Years");
                });

            modelBuilder.Entity("opensis.data.Models.UserMaster", b =>
                {
                    b.HasOne("opensis.data.Models.Language", "Lang")
                        .WithMany("UserMaster")
                        .HasForeignKey("LangId")
                        .HasConstraintName("FK_Table_User_Master_Table_Language")
                        .IsRequired();

                    b.HasOne("opensis.data.Models.Membership", "Membership")
                        .WithMany("UserMaster")
                        .HasForeignKey("TenantId", "SchoolId", "MembershipId")
                        .HasConstraintName("FK_Table_User_Master_Table_Membership");
                });
#pragma warning restore 612, 618
        }
    }
}
